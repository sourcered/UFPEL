// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/29/2017 21:06:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calculadora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calculadora_vlg_sample_tst(
	A,
	B,
	C_IN,
	SEL,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input  C_IN;
input [1:0] SEL;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C_IN or SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calculadora_vlg_check_tst (
	LED_0,
	LED_1,
	N,
	RESULTADO,
	RESULTADO_ABS,
	V,
	Z,
	sampler_rx
);
input [6:0] LED_0;
input [6:0] LED_1;
input  N;
input [3:0] RESULTADO;
input [3:0] RESULTADO_ABS;
input  V;
input  Z;
input sampler_rx;

reg [6:0] LED_0_expected;
reg [6:0] LED_1_expected;
reg  N_expected;
reg [3:0] RESULTADO_expected;
reg [3:0] RESULTADO_ABS_expected;
reg  V_expected;
reg  Z_expected;

reg [6:0] LED_0_prev;
reg [6:0] LED_1_prev;
reg  N_prev;
reg [3:0] RESULTADO_prev;
reg [3:0] RESULTADO_ABS_prev;
reg  V_prev;
reg  Z_prev;

reg [6:0] LED_0_expected_prev;
reg [6:0] LED_1_expected_prev;
reg  N_expected_prev;
reg [3:0] RESULTADO_expected_prev;
reg [3:0] RESULTADO_ABS_expected_prev;
reg  V_expected_prev;
reg  Z_expected_prev;

reg [6:0] last_LED_0_exp;
reg [6:0] last_LED_1_exp;
reg  last_N_exp;
reg [3:0] last_RESULTADO_exp;
reg [3:0] last_RESULTADO_ABS_exp;
reg  last_V_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED_0_prev = LED_0;
	LED_1_prev = LED_1;
	N_prev = N;
	RESULTADO_prev = RESULTADO;
	RESULTADO_ABS_prev = RESULTADO_ABS;
	V_prev = V;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	LED_0_expected_prev = LED_0_expected;
	LED_1_expected_prev = LED_1_expected;
	N_expected_prev = N_expected;
	RESULTADO_expected_prev = RESULTADO_expected;
	RESULTADO_ABS_expected_prev = RESULTADO_ABS_expected;
	V_expected_prev = V_expected;
	Z_expected_prev = Z_expected;
end



// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected V
initial
begin
	V_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// expected LED_0[ 6 ]
initial
begin
	LED_0_expected[6] = 1'bX;
end 
// expected LED_0[ 5 ]
initial
begin
	LED_0_expected[5] = 1'bX;
end 
// expected LED_0[ 4 ]
initial
begin
	LED_0_expected[4] = 1'bX;
end 
// expected LED_0[ 3 ]
initial
begin
	LED_0_expected[3] = 1'bX;
end 
// expected LED_0[ 2 ]
initial
begin
	LED_0_expected[2] = 1'bX;
end 
// expected LED_0[ 1 ]
initial
begin
	LED_0_expected[1] = 1'bX;
end 
// expected LED_0[ 0 ]
initial
begin
	LED_0_expected[0] = 1'bX;
end 
// expected LED_1[ 6 ]
initial
begin
	LED_1_expected[6] = 1'bX;
end 
// expected LED_1[ 5 ]
initial
begin
	LED_1_expected[5] = 1'bX;
end 
// expected LED_1[ 4 ]
initial
begin
	LED_1_expected[4] = 1'bX;
end 
// expected LED_1[ 3 ]
initial
begin
	LED_1_expected[3] = 1'bX;
end 
// expected LED_1[ 2 ]
initial
begin
	LED_1_expected[2] = 1'bX;
end 
// expected LED_1[ 1 ]
initial
begin
	LED_1_expected[1] = 1'bX;
end 
// expected LED_1[ 0 ]
initial
begin
	LED_1_expected[0] = 1'bX;
end 
// expected RESULTADO[ 3 ]
initial
begin
	RESULTADO_expected[3] = 1'bX;
end 
// expected RESULTADO[ 2 ]
initial
begin
	RESULTADO_expected[2] = 1'bX;
end 
// expected RESULTADO[ 1 ]
initial
begin
	RESULTADO_expected[1] = 1'bX;
end 
// expected RESULTADO[ 0 ]
initial
begin
	RESULTADO_expected[0] = 1'bX;
end 
// expected RESULTADO_ABS[ 3 ]
initial
begin
	RESULTADO_ABS_expected[3] = 1'bX;
end 
// expected RESULTADO_ABS[ 2 ]
initial
begin
	RESULTADO_ABS_expected[2] = 1'bX;
end 
// expected RESULTADO_ABS[ 1 ]
initial
begin
	RESULTADO_ABS_expected[1] = 1'bX;
end 
// expected RESULTADO_ABS[ 0 ]
initial
begin
	RESULTADO_ABS_expected[0] = 1'bX;
end 
// generate trigger
always @(LED_0_expected or LED_0 or LED_1_expected or LED_1 or N_expected or N or RESULTADO_expected or RESULTADO or RESULTADO_ABS_expected or RESULTADO_ABS or V_expected or V or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED_0 = %b | expected LED_1 = %b | expected N = %b | expected RESULTADO = %b | expected RESULTADO_ABS = %b | expected V = %b | expected Z = %b | ",LED_0_expected_prev,LED_1_expected_prev,N_expected_prev,RESULTADO_expected_prev,RESULTADO_ABS_expected_prev,V_expected_prev,Z_expected_prev);
	$display("| real LED_0 = %b | real LED_1 = %b | real N = %b | real RESULTADO = %b | real RESULTADO_ABS = %b | real V = %b | real Z = %b | ",LED_0_prev,LED_1_prev,N_prev,RESULTADO_prev,RESULTADO_ABS_prev,V_prev,Z_prev);
`endif
	if (
		( LED_0_expected_prev[0] !== 1'bx ) && ( LED_0_prev[0] !== LED_0_expected_prev[0] )
		&& ((LED_0_expected_prev[0] !== last_LED_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_0_expected_prev);
		$display ("     Real value = %b", LED_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_0_exp[0] = LED_0_expected_prev[0];
	end
	if (
		( LED_0_expected_prev[1] !== 1'bx ) && ( LED_0_prev[1] !== LED_0_expected_prev[1] )
		&& ((LED_0_expected_prev[1] !== last_LED_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_0_expected_prev);
		$display ("     Real value = %b", LED_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_0_exp[1] = LED_0_expected_prev[1];
	end
	if (
		( LED_0_expected_prev[2] !== 1'bx ) && ( LED_0_prev[2] !== LED_0_expected_prev[2] )
		&& ((LED_0_expected_prev[2] !== last_LED_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_0_expected_prev);
		$display ("     Real value = %b", LED_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_0_exp[2] = LED_0_expected_prev[2];
	end
	if (
		( LED_0_expected_prev[3] !== 1'bx ) && ( LED_0_prev[3] !== LED_0_expected_prev[3] )
		&& ((LED_0_expected_prev[3] !== last_LED_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_0_expected_prev);
		$display ("     Real value = %b", LED_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_0_exp[3] = LED_0_expected_prev[3];
	end
	if (
		( LED_0_expected_prev[4] !== 1'bx ) && ( LED_0_prev[4] !== LED_0_expected_prev[4] )
		&& ((LED_0_expected_prev[4] !== last_LED_0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_0_expected_prev);
		$display ("     Real value = %b", LED_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_0_exp[4] = LED_0_expected_prev[4];
	end
	if (
		( LED_0_expected_prev[5] !== 1'bx ) && ( LED_0_prev[5] !== LED_0_expected_prev[5] )
		&& ((LED_0_expected_prev[5] !== last_LED_0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_0_expected_prev);
		$display ("     Real value = %b", LED_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_0_exp[5] = LED_0_expected_prev[5];
	end
	if (
		( LED_0_expected_prev[6] !== 1'bx ) && ( LED_0_prev[6] !== LED_0_expected_prev[6] )
		&& ((LED_0_expected_prev[6] !== last_LED_0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_0_expected_prev);
		$display ("     Real value = %b", LED_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_0_exp[6] = LED_0_expected_prev[6];
	end
	if (
		( LED_1_expected_prev[0] !== 1'bx ) && ( LED_1_prev[0] !== LED_1_expected_prev[0] )
		&& ((LED_1_expected_prev[0] !== last_LED_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_1_expected_prev);
		$display ("     Real value = %b", LED_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_1_exp[0] = LED_1_expected_prev[0];
	end
	if (
		( LED_1_expected_prev[1] !== 1'bx ) && ( LED_1_prev[1] !== LED_1_expected_prev[1] )
		&& ((LED_1_expected_prev[1] !== last_LED_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_1_expected_prev);
		$display ("     Real value = %b", LED_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_1_exp[1] = LED_1_expected_prev[1];
	end
	if (
		( LED_1_expected_prev[2] !== 1'bx ) && ( LED_1_prev[2] !== LED_1_expected_prev[2] )
		&& ((LED_1_expected_prev[2] !== last_LED_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_1_expected_prev);
		$display ("     Real value = %b", LED_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_1_exp[2] = LED_1_expected_prev[2];
	end
	if (
		( LED_1_expected_prev[3] !== 1'bx ) && ( LED_1_prev[3] !== LED_1_expected_prev[3] )
		&& ((LED_1_expected_prev[3] !== last_LED_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_1_expected_prev);
		$display ("     Real value = %b", LED_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_1_exp[3] = LED_1_expected_prev[3];
	end
	if (
		( LED_1_expected_prev[4] !== 1'bx ) && ( LED_1_prev[4] !== LED_1_expected_prev[4] )
		&& ((LED_1_expected_prev[4] !== last_LED_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_1_expected_prev);
		$display ("     Real value = %b", LED_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_1_exp[4] = LED_1_expected_prev[4];
	end
	if (
		( LED_1_expected_prev[5] !== 1'bx ) && ( LED_1_prev[5] !== LED_1_expected_prev[5] )
		&& ((LED_1_expected_prev[5] !== last_LED_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_1_expected_prev);
		$display ("     Real value = %b", LED_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_1_exp[5] = LED_1_expected_prev[5];
	end
	if (
		( LED_1_expected_prev[6] !== 1'bx ) && ( LED_1_prev[6] !== LED_1_expected_prev[6] )
		&& ((LED_1_expected_prev[6] !== last_LED_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_1_expected_prev);
		$display ("     Real value = %b", LED_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_1_exp[6] = LED_1_expected_prev[6];
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( RESULTADO_expected_prev[0] !== 1'bx ) && ( RESULTADO_prev[0] !== RESULTADO_expected_prev[0] )
		&& ((RESULTADO_expected_prev[0] !== last_RESULTADO_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_expected_prev);
		$display ("     Real value = %b", RESULTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RESULTADO_exp[0] = RESULTADO_expected_prev[0];
	end
	if (
		( RESULTADO_expected_prev[1] !== 1'bx ) && ( RESULTADO_prev[1] !== RESULTADO_expected_prev[1] )
		&& ((RESULTADO_expected_prev[1] !== last_RESULTADO_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_expected_prev);
		$display ("     Real value = %b", RESULTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RESULTADO_exp[1] = RESULTADO_expected_prev[1];
	end
	if (
		( RESULTADO_expected_prev[2] !== 1'bx ) && ( RESULTADO_prev[2] !== RESULTADO_expected_prev[2] )
		&& ((RESULTADO_expected_prev[2] !== last_RESULTADO_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_expected_prev);
		$display ("     Real value = %b", RESULTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RESULTADO_exp[2] = RESULTADO_expected_prev[2];
	end
	if (
		( RESULTADO_expected_prev[3] !== 1'bx ) && ( RESULTADO_prev[3] !== RESULTADO_expected_prev[3] )
		&& ((RESULTADO_expected_prev[3] !== last_RESULTADO_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_expected_prev);
		$display ("     Real value = %b", RESULTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RESULTADO_exp[3] = RESULTADO_expected_prev[3];
	end
	if (
		( RESULTADO_ABS_expected_prev[0] !== 1'bx ) && ( RESULTADO_ABS_prev[0] !== RESULTADO_ABS_expected_prev[0] )
		&& ((RESULTADO_ABS_expected_prev[0] !== last_RESULTADO_ABS_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO_ABS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_ABS_expected_prev);
		$display ("     Real value = %b", RESULTADO_ABS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RESULTADO_ABS_exp[0] = RESULTADO_ABS_expected_prev[0];
	end
	if (
		( RESULTADO_ABS_expected_prev[1] !== 1'bx ) && ( RESULTADO_ABS_prev[1] !== RESULTADO_ABS_expected_prev[1] )
		&& ((RESULTADO_ABS_expected_prev[1] !== last_RESULTADO_ABS_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO_ABS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_ABS_expected_prev);
		$display ("     Real value = %b", RESULTADO_ABS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RESULTADO_ABS_exp[1] = RESULTADO_ABS_expected_prev[1];
	end
	if (
		( RESULTADO_ABS_expected_prev[2] !== 1'bx ) && ( RESULTADO_ABS_prev[2] !== RESULTADO_ABS_expected_prev[2] )
		&& ((RESULTADO_ABS_expected_prev[2] !== last_RESULTADO_ABS_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO_ABS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_ABS_expected_prev);
		$display ("     Real value = %b", RESULTADO_ABS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RESULTADO_ABS_exp[2] = RESULTADO_ABS_expected_prev[2];
	end
	if (
		( RESULTADO_ABS_expected_prev[3] !== 1'bx ) && ( RESULTADO_ABS_prev[3] !== RESULTADO_ABS_expected_prev[3] )
		&& ((RESULTADO_ABS_expected_prev[3] !== last_RESULTADO_ABS_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULTADO_ABS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULTADO_ABS_expected_prev);
		$display ("     Real value = %b", RESULTADO_ABS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RESULTADO_ABS_exp[3] = RESULTADO_ABS_expected_prev[3];
	end
	if (
		( V_expected_prev !== 1'bx ) && ( V_prev !== V_expected_prev )
		&& ((V_expected_prev !== last_V_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_expected_prev);
		$display ("     Real value = %b", V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_V_exp = V_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calculadora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg C_IN;
reg [1:0] SEL;
// wires                                               
wire [6:0] LED_0;
wire [6:0] LED_1;
wire N;
wire [3:0] RESULTADO;
wire [3:0] RESULTADO_ABS;
wire V;
wire Z;

wire sampler;                             

// assign statements (if any)                          
calculadora i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C_IN(C_IN),
	.LED_0(LED_0),
	.LED_1(LED_1),
	.N(N),
	.RESULTADO(RESULTADO),
	.RESULTADO_ABS(RESULTADO_ABS),
	.SEL(SEL),
	.V(V),
	.Z(Z)
);
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #400000 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #400000 1'b0;
	A[0] = #400000 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #600000 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #200000 1'b1;
	B[1] = #400000 1'b0;
end 
// B[ 0 ]
initial
begin
	repeat(2)
	begin
		B[0] = 1'b1;
		B[0] = #200000 1'b0;
		# 200000;
	end
	B[0] = 1'b1;
end 

// C_IN
initial
begin
	C_IN = 1'b0;
end 
// SEL[ 1 ]
initial
begin
	SEL[1] = 1'b1;
end 
// SEL[ 0 ]
initial
begin
	SEL[0] = 1'b0;
end 

calculadora_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C_IN(C_IN),
	.SEL(SEL),
	.sampler_tx(sampler)
);

calculadora_vlg_check_tst tb_out(
	.LED_0(LED_0),
	.LED_1(LED_1),
	.N(N),
	.RESULTADO(RESULTADO),
	.RESULTADO_ABS(RESULTADO_ABS),
	.V(V),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

